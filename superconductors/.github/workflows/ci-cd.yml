name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: gcr.io
  GKE_CLUSTER: superconductor-cluster
  GKE_ZONE: us-central1-a
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres123
          POSTGRES_DB: superconductor_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-test.txt
        
    - name: Run Flyway migrations
      run: |
        docker run --rm \
          -v ${{ github.workspace }}/db/migration:/flyway/sql \
          -e FLYWAY_URL=jdbc:postgresql://localhost:5432/superconductor_test \
          -e FLYWAY_USER=postgres \
          -e FLYWAY_PASSWORD=postgres123 \
          --network host \
          flyway/flyway:9 migrate
          
    - name: Run tests
      env:
        DB_HOST: localhost
        DB_NAME: superconductor_test
        DB_USER: postgres
        DB_PASSWORD: postgres123
        REDIS_URL: redis://localhost:6379
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --junitxml=test-results.xml
        
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: test-results.xml

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
        
    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      with:
        name: bandit-report
        path: bandit-report.json

  build:
    name: Build and Push Images
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      
    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker
        
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/superconductor-api:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/superconductor-api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Worker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.worker
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/superconductor-worker:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/superconductor-worker:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to GKE
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      
    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
          --zone ${{ env.GKE_ZONE }} \
          --project ${{ env.PROJECT_ID }}
          
    - name: Deploy to GKE
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/*.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/postgres.yaml
        kubectl apply -f k8s/redis.yaml
        kubectl apply -f k8s/api-deployment.yaml
        kubectl apply -f k8s/worker-deployment.yaml
        kubectl apply -f k8s/ingress.yaml
        
        # Wait for rollout to complete
        kubectl rollout status deployment/superconductor-api -n superconductor
        kubectl rollout status deployment/superconductor-worker -n superconductor
        
    - name: Verify deployment
      run: |
        kubectl get pods -n superconductor
        kubectl get services -n superconductor
        
    - name: Run smoke tests
      run: |
        API_URL=$(kubectl get ingress -n superconductor -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}')
        curl -f http://$API_URL/health || exit 1